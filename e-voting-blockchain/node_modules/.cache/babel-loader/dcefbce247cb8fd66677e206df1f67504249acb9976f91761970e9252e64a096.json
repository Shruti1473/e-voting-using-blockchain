{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Victus\\\\Desktop\\\\e-voting-blockchain\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport contractABI from \"./abi/Voting.json\"; // Ensure ABI is correctly updated\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const CONTRACT_ADDRESS = \"0x9e836b103ca160952044792977de0f2eb8841b47433088e93d497e3a8e2d31c2\"; // Replace with your deployed contract address\n\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  // ✅ Load MetaMask and Smart Contract\n  async function loadBlockchainData() {\n    if (window.ethereum) {\n      try {\n        const web3Instance = new Web3(window.ethereum);\n        setWeb3(web3Instance);\n\n        // Request MetaMask account access\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setAccount(accounts[0]);\n\n        // ✅ Load Smart Contract\n        const contractInstance = new web3Instance.eth.Contract(contractABI, CONTRACT_ADDRESS);\n        setContract(contractInstance);\n\n        // ✅ Fetch Candidates from Blockchain\n        fetchCandidates(contractInstance);\n\n        // Listen for account changes\n        window.ethereum.on(\"accountsChanged\", accounts => {\n          setAccount(accounts[0] || \"\");\n        });\n      } catch (error) {\n        console.error(\"User denied account access or error in connecting:\", error);\n      }\n    } else {\n      alert(\"MetaMask not detected! Please install it.\");\n    }\n  }\n\n  // ✅ Fetch Candidates from Smart Contract\n  async function fetchCandidates(contractInstance) {\n    try {\n      const totalCandidates = await contractInstance.methods.getTotalCandidates().call();\n      let candidatesList = [];\n      for (let i = 0; i < totalCandidates; i++) {\n        const candidate = await contractInstance.methods.candidates(i).call();\n        candidatesList.push({\n          id: candidate.id,\n          name: candidate.name,\n          voteCount: candidate.voteCount\n        });\n      }\n      setCandidates(candidatesList);\n    } catch (error) {\n      console.error(\"Error fetching candidates:\", error);\n    }\n  }\n\n  // ✅ Voting Function\n  async function vote(candidateId) {\n    if (!account || !contract) {\n      alert(\"Connect your MetaMask wallet first!\");\n      return;\n    }\n    try {\n      await contract.methods.vote(candidateId).send({\n        from: account\n      });\n      alert(\"Vote successfully cast!\");\n      fetchCandidates(contract); // Refresh candidates after voting\n    } catch (error) {\n      console.error(\"Error submitting vote:\", error);\n      alert(\"Voting failed: \" + error.message);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"E-Voting System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadBlockchainData,\n      children: \"Connect MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Connected Account: \", account || \"Not connected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), candidates.length > 0 ? candidates.map(candidate => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [candidate.name, \" - \", candidate.voteCount, \" votes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => vote(candidate.id),\n        children: \"Vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, candidate.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading candidates...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5qb0oTV5CCnDYuu5IdfuSbVjscE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Web3","contractABI","jsxDEV","_jsxDEV","App","_s","account","setAccount","candidates","setCandidates","contract","setContract","web3","setWeb3","CONTRACT_ADDRESS","loadBlockchainData","window","ethereum","web3Instance","accounts","request","method","contractInstance","eth","Contract","fetchCandidates","on","error","console","alert","totalCandidates","methods","getTotalCandidates","call","candidatesList","i","candidate","push","id","name","voteCount","vote","candidateId","send","from","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","_c","$RefreshReg$"],"sources":["C:/Users/Victus/Desktop/e-voting-blockchain/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport contractABI from \"./abi/Voting.json\"; // Ensure ABI is correctly updated\r\n\r\nfunction App() {\r\n  const [account, setAccount] = useState(\"\");\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [contract, setContract] = useState(null);\r\n  const [web3, setWeb3] = useState(null);\r\n  const CONTRACT_ADDRESS = \"0x9e836b103ca160952044792977de0f2eb8841b47433088e93d497e3a8e2d31c2\"; // Replace with your deployed contract address\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData();\r\n  }, []);\r\n\r\n  // ✅ Load MetaMask and Smart Contract\r\n  async function loadBlockchainData() {\r\n    if (window.ethereum) {\r\n      try {\r\n        const web3Instance = new Web3(window.ethereum);\r\n        setWeb3(web3Instance);\r\n\r\n        // Request MetaMask account access\r\n        const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        setAccount(accounts[0]);\r\n\r\n        // ✅ Load Smart Contract\r\n        const contractInstance = new web3Instance.eth.Contract(contractABI, CONTRACT_ADDRESS);\r\n        setContract(contractInstance);\r\n\r\n        // ✅ Fetch Candidates from Blockchain\r\n        fetchCandidates(contractInstance);\r\n\r\n        // Listen for account changes\r\n        window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n          setAccount(accounts[0] || \"\");\r\n        });\r\n      } catch (error) {\r\n        console.error(\"User denied account access or error in connecting:\", error);\r\n      }\r\n    } else {\r\n      alert(\"MetaMask not detected! Please install it.\");\r\n    }\r\n  }\r\n\r\n  // ✅ Fetch Candidates from Smart Contract\r\n  async function fetchCandidates(contractInstance) {\r\n    try {\r\n      const totalCandidates = await contractInstance.methods.getTotalCandidates().call();\r\n      let candidatesList = [];\r\n\r\n      for (let i = 0; i < totalCandidates; i++) {\r\n        const candidate = await contractInstance.methods.candidates(i).call();\r\n        candidatesList.push({\r\n          id: candidate.id,\r\n          name: candidate.name,\r\n          voteCount: candidate.voteCount,\r\n        });\r\n      }\r\n\r\n      setCandidates(candidatesList);\r\n    } catch (error) {\r\n      console.error(\"Error fetching candidates:\", error);\r\n    }\r\n  }\r\n\r\n  // ✅ Voting Function\r\n  async function vote(candidateId) {\r\n    if (!account || !contract) {\r\n      alert(\"Connect your MetaMask wallet first!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await contract.methods.vote(candidateId).send({ from: account });\r\n      alert(\"Vote successfully cast!\");\r\n      fetchCandidates(contract); // Refresh candidates after voting\r\n    } catch (error) {\r\n      console.error(\"Error submitting vote:\", error);\r\n      alert(\"Voting failed: \" + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>E-Voting System</h1>\r\n      <button onClick={loadBlockchainData}>Connect MetaMask</button>\r\n      <h3>Connected Account: {account || \"Not connected\"}</h3>\r\n\r\n      {candidates.length > 0 ? (\r\n        candidates.map((candidate) => (\r\n          <div key={candidate.id}>\r\n            <p>\r\n              {candidate.name} - {candidate.voteCount} votes\r\n            </p>\r\n            <button onClick={() => vote(candidate.id)}>Vote</button>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Loading candidates...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}